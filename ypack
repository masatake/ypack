#!/bin/sh
#| -*- scheme -*- |#
:; exec gosh -- $0 "$@"
;; 
;; ypack --- es expression front end for pmaker, that was xpack
;; 
;;  Copyright (C) 2011 Masatake YAMATO
;; 
;;  This program is free software: you can redistribute it and/or modify
;;  it under the terms of the GNU General Public License as published by
;;  the Free Software Foundation; either version 3 of the License, or
;;  (at your option) any later version.
;; 
;;  This program is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU General Public License for more details.
;; 
;;  You should have received a copy of the GNU General Public License
;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.
;; 
;;  Author: Masatake YAMATO <yamato@redhat.com>
;;
(define expected-input "
 (ypack-name \"...\")
 (ypack-version \"...\")
 (ypack-require \"...\")...
 (ypack-entry FROM TO MODE ...)...
 (ypack-entry TO MODE ...)
 (ypack-link  FROM TO)
 (ypack-dir   TO)
 (ypack-dummy TO)
")

(use srfi-1)
(use util.match)
(use file.util)
(use util.list)
(use gauche.parseopt)

(define-class <entry-info> ()
  ((from :init-keyword :from)
   (to :init-keyword :to)
   (mode :init-keyword :mode)
   (uid :init-keyword :uid)
   (gid :init-keyword :gid)
   (create-as)
   ))

(define-class <regular-info> (<entry-info>)
  (
   (create-as :init-value "file")
   ))
(define-class <dir-info> (<entry-info>)
  (
   (create-as :init-value "dir")
   ))
(define-class <link-info> (<entry-info>)
  (
   (create-as :init-value "symlink")
   ))
(define-class <dummy-info> (<entry-info>)
  (
   (create-as :init-value "file")
   (dummy-count :init-keyword :dummy-count)
   ))


(define (mode-symbols->numbers msyms)
  (define (xa left)
    (fold (lambda (c kdr) (if (eq? c #\a) 
			      (lset-union eq? '(#\u #\g #\o) kdr)
			      (lset-adjoin eq? kdr c)))
	  (list) (string->list left)))
  (define (l->shift l)
    (or (assoc-ref '((#\u . 6)
		     (#\g . 3)
		     (#\o . 0))
		   l #f)
	(error "Unknow left value: " l)))
  (define (r->bits r)
    (assoc-ref '((#\x . #b00000000001)
		 (#\w . #b00000000010)
		 (#\r . #b00000000100)
		 (#\t . #b01000000000)
		 (#\s . #b10000000000))
	       r #f))

  (define (lr->m left right)
    (apply logior
	   0
	   (append-map
	    (lambda (l)
	      (map
	       (lambda (r)
		 (case r
		   ((#\x #\w #\r) (ash (r->bits r) (l->shift l)))
		   ('#\t (r->bits r))
		   ('#\s (ash (r->bits r)
			      (if (eq? l #\u) 1 0)))
		   (else
		    (error "Unknow right value: " r))))
	       (string->list right)))
	    (xa left))))
  (let loop ((msyms (string-split msyms ","))
	     (m #o0))
    (if (null? msyms)
	m
	(rxmatch-if (#/([^+-=]+)([+-=])([^+-=]+)/ (car msyms))
		    (#f left op right)
		    (loop (cdr msyms)
			  (case (car (string->list op))
			    ;('#\= (lr->m left right))
			    ('#\- (logand m (lognot (lr->m left right))))
			    ('#\+ (logior m (lr->m left right)))
			    (else
			     (error "Unknow operator: " op))))
		    (error "Failed in parse mode string")))))

(define-method emit-attrs ((entry <entry-info>))
  (apply 
   string-append
   (let1 r (list (if-let1 r (ref entry 'uid) 
			  #`",,uid=,r"
			  "")
		 (if-let1 r (ref entry 'gid) 
			  #`",,gid=,r"
			  "")
		 (if-let1 r (format "0~o"
				    (mode-symbols->numbers (ref entry 'mode)))
			  #`",,mode=,r"
			  "")
		 )
	 r)))

(define-method emit-attrs ((entry <link-info>))
  #`",(next-method),,create=1,,linkto=,(ref entry 'to)")

;(define-method emit-attrs ((entry <dir-info>))
;  (let1 base (next-method)
;	#`",base,,create=,(ref entry 'create-as)"))

(define-method prepare ((entry <regular-info>))
  (let1 dir-flag (if (file-is-directory? (ref entry 'from))
		     "-d" "")
    (print #`"install ,dir-flag -D --mode=,(ref entry 'mode) ,(ref entry 'from) build,(ref entry 'to)")))
(define-method prepare ((entry <dir-info>))
  (let1 dir (ref entry 'to)
    (print #`"mkdir -p build,|dir|")))
(define-method prepare ((entry <link-info>))
  #;(let ((dir (sys-dirname (ref entry 'from)))
	   (link (sys-basename (ref entry 'from))))
       (print #`"mkdir -p build,|dir|")
       (print #`"ln -s ,(ref entry 'to) build,(ref entry 'from)"))
  #t)
(define-method prepare ((entry <dummy-info>))
  (let1 to (ref entry 'to)
    (print #`"echo ,(ref entry 'dummy-count) > build,|to|")
    (print #`"chmod ,(ref entry 'mode) build,|to|")))

(define (esc-with-backslash str)
  (regexp-replace-all #/,/ str "\\\\,"))

(define-method emit-file-list-entry ((entry <regular-info>))
  (print #`"$(pwd)/build,(esc-with-backslash (ref entry 'to)),(emit-attrs entry)"))
(define-method emit-file-list-entry ((entry <dir-info>))
  (print #`"$(pwd)/build,(esc-with-backslash (ref entry 'to)),(emit-attrs entry)"))
(define-method emit-file-list-entry ((entry <link-info>))
  (print #`"$(pwd)/build,(esc-with-backslash (ref entry 'from)),(emit-attrs entry)"))
(define-method emit-file-list-entry ((entry <dummy-info>))
  (print #`"$(pwd)/build,(esc-with-backslash (ref entry 'to)),(emit-attrs entry)"))


(define (gather)
  (let loop ((exp (read))
	     (name #f)
	     (version "0.0.0")
	     (entries (list))
	     (requires (list))
	     (dummy-count 0)
	     (license #f)
	     (url #f))
    (if (eof-object? exp)
	(values version name (reverse entries) requires license url)
	(case (car exp)
	  ('ypack-version (loop (read) name (cadr exp) entries requires dummy-count license url))
	  ('ypack-license (loop (read) name version entries requires dummy-count (cadr exp) url))
	  ('ypack-url     (loop (read) name version entries requires dummy-count license (cadr exp)))
	  ('ypack-entry (match-let1 (target . rest) (cdr exp)
				    (let* ((full-notation? (and (pair? rest)
								(string? (car rest))))
					   (from (if full-notation? target (sys-basename target)))
					   (to (if full-notation? (car rest) target))
					   (rest (if full-notation? (cdr rest) rest)))
				      (unless (file-exists? from)
					(error "No such file: " from))
				      (let-keywords rest ((mode "u+w,a+rx")
							  (uid "root")
							  (gid "root"))
					(loop (read)
					      name
					      version
					      (cons (make <regular-info>
						      :from from 
						      :to to
						      :mode mode
						      :uid uid
						      :gid gid)
						    entries)
					      requires
					      dummy-count
					      license
					      url)))))
	  ('ypack-dir (match-let1 (to . rest) (cdr exp)
				  (let-keywords rest ((mode "u+rxw,go+rx")
						      (uid "root")
						      (gid "root"))
						(loop (read)
						      name
						      version
						      (cons (make <dir-info>
							      :from #f
							      :to to
							      :mode mode
							      :uid uid
							      :gid gid)
							    entries)
						      requires
						      dummy-count
						      license
						      url))))
	  ('ypack-link (match-let1 (from to . rest) (cdr exp)
			 (loop (read)
			       name
			       version
			       (cons (make <link-info>
				       :from from 
				       :to to
				       :mode "a+rwx"
				       :uid "root"
				       :gid "root")
				     entries)
			       requires
			       dummy-count
			       license
			       url)))
	  ('ypack-dummy (match-let1 (to . rest) (cdr exp)
			  (let-keywords rest ((mode "u+w,a+rx")
					      (uid "root")
					      (gid "root"))
			    (loop (read)
				  name
				  version
				  (cons (make <dummy-info>
					  :from #f
					  :to to
					  :mode mode
					  :dummy-count dummy-count
					  :uid uid
					  :gid gid)
					entries)
				  requires
				  (+ dummy-count 1)
				  license
				  url))))
	  ('ypack-name (loop (read)
			     (cadr exp)
			     version
			     entries
			     requires
			     dummy-count
			     license
			     url))
	  ('ypack-require (loop (read) 
				name
				version
				entries
				(cons (cadr exp) requires)
				dummy-count
				license
				url))
	  (else
	   (error "Unknown directive: " (car exp)))))))

(define (emit target version name entries requires license url)
  (define (emit-xpack-relations)
    (unless (null? requires)
      (let1 requires (apply string-append (intersperse "," requires))
	(print #`"	--requires ,|requires| \\"))))
  (define (emit-pmaker-relations)
    (unless (null? requires)
      (let1 requires (apply string-append (intersperse "," requires))
	(print #`"	--relations=requires:,|requires| \\"))))
  (unless name
    (error "No NAME given"))

  ;;
  (print "#!/bin/bash -x")
  (print "uv=${1:-0}")
  (newline)
  (print "rm -rf workdir build")
  (for-each prepare entries)

  (print #`",(symbol->string target) --verbose --name ,|name|	\\")
  (when license
	(print #`"	--license=\",|license|\" \\"))
  (when url
	(print #`"	--url=,|url| \\"))
  (print #`"	--destdir=$(pwd)/build \\")
  (print #`"	--pversion=,|version|.${uv} \\")
  
  (case target
    ('xpack (emit-xpack-relations))
    ('pmaker (emit-pmaker-relations)))

  (print "\"$@\ \\")
  (print "- <<EOF")
  (for-each emit-file-list-entry entries)
  (print "EOF"))

(define (print-help status)
  (format #t "Usage: \n")
  (format #t "	~a --xpack  < _.ypk\n" *program-name*)
  (format #t "	~a --pmaker < _.ypk\n" *program-name*)
  (newline)
  (format #t "Input format: \n")
  (print expected-input)
  (exit status))

(define (main args)
  (let-args (cdr args)
      ((help "h|help" => (pa$ print-help 0))
       (xpack "xpack" #f)
       (pmaker "pmaker" #t))
    (let1 target (if xpack 'xpack 'pmaker)
      (call-with-values gather (pa$ emit target)))))
